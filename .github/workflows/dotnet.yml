name: VIES-dotnet build, test & notify(slack)

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'The reason for running the workflow'
        required: false
        default: 'Manual run'
  push:
    branches: [ master ]
    paths-ignore:
    - 'README.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
    - 'README.md'

env:
  BUILD_CONFIG: 'Release'
  DOTNET_VERSION: '3.1.x'  

jobs:
  build:
    name: build-and-test-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]#, windows-latest, macOS-latest]
        # dotnet-version: ['3.1.0', '5.1.x', '6.0.x']

    steps:
    - uses: actions/checkout@v2
    - name: 'Print manual run reason'
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo 'Reason: ${{ github.event.inputs.reason }}'
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
   
      
    - name: Set pull request build number (if pr)
      id: PRNUMBER
      if: ${{ github.event_name == 'pull_request' }}
      uses: kkak10/pr-number-action@v1.3
      
      # set report file and title 
    - name: Set Test Title
      run: | 
            if ${{ github.event_name == 'pull_request' }}
            then
              echo "title=Test Run for PR #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})" >> $GITHUB_ENV
              echo "file_name=TestReport.${{steps.PRNUMBER.outputs.pr}}.${{github.run_number}}.md" >> $GITHUB_ENV              
            else
              echo "title=Test Run ${{github.run_number}}" >> $GITHUB_ENV
              echo "file_name=TestReport.${{github.run_number}}.md" >> $GITHUB_ENV
            fi
      
      # run tests with built project
    - name: Test PR      
      run: dotnet test --no-restore --no-build --configuration $config --verbosity normal --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};"
      
      # upload report as build artifact
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      if: ${{always()}}
      with:
        name: 'Test Run'
        path: ${{github.workspace}}/${{env.file_name}}
      
      # add report as PR comment (if PR)
    - name: comment PR
      uses: machine-learning-apps/pr-comment@master
      if: ${{ github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        path: ${{env.file_name}}
    - name: GitHub Action for Slack
      if: success()
      env:
       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      uses: Ilshidur/action-slack@1.6.2
      with:
       args: 'A new version of your VIES app has been built'
#   pack:
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.event_name == 'push'
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v1
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
#     - name: Determine version
#       run: echo "::set-env name=VERSION::$(git describe --tags --dirty)"
#     - name: Pack
#       run: dotnet pack --output ./artifacts --configuration Release -p:Version=$VERSION
#     - uses: actions/upload-artifact@v1
#       with:
#         name: artifacts
#         path: ./artifacts    
#   publish:
#     runs-on: ubuntu-latest
#     needs: pack
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#     steps:
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}
#     - uses: actions/download-artifact@v1
#       with:
#         name: artifacts
#         path: ./artifacts
#     - name: Publish packages
#       run: dotnet nuget push ./artifacts/**.nupkg --source nuget.org --api-key ${{secrets.NUGET_TOKEN}}
      
 

